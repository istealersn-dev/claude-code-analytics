version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: claude-analytics-db
    environment:
      POSTGRES_DB: claude_code_analytics
      POSTGRES_USER: claude_user
      POSTGRES_PASSWORD: claude_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema-claude-code-2.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U claude_user -d claude_code_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - claude-network

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: claude-analytics-backend
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://claude_user:claude_password@postgres:5432/claude_code_analytics
      PORT: 3001
      # Claude Code 2.0 specific settings
      CLAUDE_CODE_2_ENABLED: "true"
      EXTENDED_SESSION_THRESHOLD: "108000"  # 30 hours
      AUTONOMY_LEVEL_THRESHOLD: "7"
      CHECKPOINT_RETENTION_DAYS: "90"
      BACKGROUND_TASK_TIMEOUT: "3600"  # 1 hour
      SUBAGENT_MAX_CONCURRENT: "5"
      VSCODE_INTEGRATION_ENABLED: "true"
    volumes:
      # Mount Claude Code projects directory for data access
      - ~/.claude/projects:/app/data/claude-projects:ro
      # Mount logs directory
      - ./logs:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - claude-network

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: claude-analytics-frontend
    environment:
      NODE_ENV: production
      VITE_API_URL: http://backend:3001
      # Claude Code 2.0 frontend settings
      VITE_CLAUDE_CODE_2_ENABLED: "true"
      VITE_EXTENDED_SESSION_SUPPORT: "true"
      VITE_AUTONOMY_LEVEL_DISPLAY: "true"
      VITE_CHECKPOINT_ANALYTICS: "true"
      VITE_SUBAGENT_ANALYTICS: "true"
      VITE_BACKGROUND_TASK_ANALYTICS: "true"
      VITE_VSCODE_INTEGRATION_ANALYTICS: "true"
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - claude-network

  # Redis for caching (optional, for performance)
  redis:
    image: redis:7-alpine
    container_name: claude-analytics-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - claude-network

  # Data Sync Service (for automated data processing)
  data-sync:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: claude-analytics-sync
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://claude_user:claude_password@postgres:5432/claude_code_analytics
      # Claude Code 2.0 sync settings
      SYNC_INTERVAL: "300000"  # 5 minutes
      CLAUDE_CODE_2_FEATURES: "true"
      EXTENDED_SESSION_DETECTION: "true"
      AUTONOMY_LEVEL_TRACKING: "true"
      CHECKPOINT_PROCESSING: "true"
      SUBAGENT_TRACKING: "true"
      BACKGROUND_TASK_MONITORING: "true"
      VSCODE_INTEGRATION_TRACKING: "true"
    volumes:
      # Mount Claude Code projects directory for data access
      - ~/.claude/projects:/app/data/claude-projects:ro
      # Mount logs directory
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    networks:
      - claude-network

  # Monitoring and Logging
  prometheus:
    image: prom/prometheus:latest
    container_name: claude-analytics-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - claude-network

  grafana:
    image: grafana/grafana:latest
    container_name: claude-analytics-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - claude-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  claude-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
