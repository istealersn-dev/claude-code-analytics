/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SessionsRouteImport } from './routes/sessions'
import { Route as IndexRouteImport } from './routes/index'
import { Route as SessionsSessionIdRouteImport } from './routes/sessions.$sessionId'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsRoute = SessionsRouteImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsSessionIdRoute = SessionsSessionIdRouteImport.update({
  id: '/$sessionId',
  path: '/$sessionId',
  getParentRoute: () => SessionsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/sessions': typeof SessionsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/sessions': typeof SessionsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/sessions': typeof SessionsRouteWithChildren
  '/settings': typeof SettingsRoute
  '/sessions/$sessionId': typeof SessionsSessionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/sessions' | '/settings' | '/sessions/$sessionId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/sessions' | '/settings' | '/sessions/$sessionId'
  id: '__root__' | '/' | '/sessions' | '/settings' | '/sessions/$sessionId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SessionsRoute: typeof SessionsRouteWithChildren
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions': {
      id: '/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions/$sessionId': {
      id: '/sessions/$sessionId'
      path: '/$sessionId'
      fullPath: '/sessions/$sessionId'
      preLoaderRoute: typeof SessionsSessionIdRouteImport
      parentRoute: typeof SessionsRoute
    }
  }
}

interface SessionsRouteChildren {
  SessionsSessionIdRoute: typeof SessionsSessionIdRoute
}

const SessionsRouteChildren: SessionsRouteChildren = {
  SessionsSessionIdRoute: SessionsSessionIdRoute,
}

const SessionsRouteWithChildren = SessionsRoute._addFileChildren(
  SessionsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SessionsRoute: SessionsRouteWithChildren,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
